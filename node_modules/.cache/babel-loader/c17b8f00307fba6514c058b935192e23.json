{"ast":null,"code":"import { withModifiers as _withModifiers, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-2\"\n};\nconst _hoisted_2 = {\n  class: \"flex-row\",\n  style: {\n    \"justify-content\": \"space-around\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = _withModifiers($event => $options.play('./music/new-wave-kit.ogg'), [\"prevent\"]))\n  }, \"play music 1\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = _withModifiers($event => $options.play('./music/synth-organ.ogg'), [\"prevent\"]))\n  }, \"play music 2\")])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAQ;;EACZA,KAAK,EAAC,UAAU;EAACC,KAAqC,EAArC;IAAA;EAAA;;;uBADxBC,oBAKM,OALNC,UAKM,GAJJC,oBAGM,OAHNC,UAGM,GAFJD,oBAA+E;IAAtEE,OAAK,qDAAUC,aAAI;KAA8B,cAAY,GACtEH,oBAA8E;IAArEE,OAAK,qDAAUC,aAAI;KAA6B,cAAY","names":["class","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","$options"],"sourceRoot":"","sources":["/Users/yulong/Desktop/bandlab/src/views/pageTwo.vue"],"sourcesContent":["<template>\n  <div class=\"page-2\">\n    <div class=\"flex-row\" style=\"justify-content: space-around\">\n      <button @click.prevent=\"play('./music/new-wave-kit.ogg')\">play music 1</button>\n      <button @click.prevent=\"play('./music/synth-organ.ogg')\">play music 2</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      ctx: ''\n    };\n  },\n  mounted() {},\n  methods: {\n    play(what) {\n      if(this.ctx !== ''){\n        this.stop()\n      }\n      \n      this.ctx = new AudioContext();\n      let audio;\n      fetch(what)\n        .then((data) => data.arrayBuffer())\n        .then((arrayBuffer) => this.ctx.decodeAudioData(arrayBuffer))\n        .then((decodedAudio) => {\n          audio = decodedAudio;\n          const playSound = this.ctx.createBufferSource();\n          playSound.buffer = audio;\n          playSound.connect(this.ctx.destination);\n          playSound.start(this.ctx.currentTime);\n        });\n    },\n    stop(){\n      this.ctx.close();\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}