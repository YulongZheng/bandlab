{"ast":null,"code":"export default {\n  data() {\n    return {};\n  },\n  mounted() {},\n  methods: {\n    play(what) {\n      const ctx = new AudioContext();\n      let audio;\n      fetch(what).then(data => data.arrayBuffer()).then(arrayBuffer => ctx.decodeAudioData(arrayBuffer)).then(decodedAudio => {\n        audio = decodedAudio;\n        const playSound = ctx.createBufferSource();\n        playSound.buffer = audio;\n        playSound.connect(ctx.destination);\n        playSound.start(ctx.currentTime);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAUA,eAAe;EACbA,IAAI,GAAG;IACL,OAAO,CAAC,CAAC;EACX,CAAC;EACDC,OAAO,GAAG,CAAC,CAAC;EACZC,OAAO,EAAE;IACPC,IAAI,CAACC,IAAI,EAAE;MACT,MAAMC,GAAE,GAAI,IAAIC,YAAY,EAAE;MAC9B,IAAIC,KAAK;MACTC,KAAK,CAACJ,IAAI,EACPK,IAAI,CAAET,IAAI,IAAKA,IAAI,CAACU,WAAW,EAAE,EACjCD,IAAI,CAAEC,WAAW,IAAKL,GAAG,CAACM,eAAe,CAACD,WAAW,CAAC,EACtDD,IAAI,CAAEG,YAAY,IAAK;QACtBL,KAAI,GAAIK,YAAY;QACpB,MAAMC,SAAQ,GAAIR,GAAG,CAACS,kBAAkB,EAAE;QAC1CD,SAAS,CAACE,MAAK,GAAIR,KAAK;QACxBM,SAAS,CAACG,OAAO,CAACX,GAAG,CAACY,WAAW,CAAC;QAClCJ,SAAS,CAACK,KAAK,CAACb,GAAG,CAACc,WAAW,CAAC;MAClC,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["data","mounted","methods","play","what","ctx","AudioContext","audio","fetch","then","arrayBuffer","decodeAudioData","decodedAudio","playSound","createBufferSource","buffer","connect","destination","start","currentTime"],"sourceRoot":"","sources":["/Users/yulong/Desktop/bandlab/src/views/pageTwo.vue"],"sourcesContent":["<template>\n  <div class=\"page-2\">\n    <div class=\"flex-row\" style=\"justify-content: space-around\">\n      <button @click.prevent=\"play('./music/new-wave-kit.ogg')\">play music 1</button>\n      <button @click.prevent=\"play('./music/synth-organ.ogg')\">play music 2</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {},\n  methods: {\n    play(what) {\n      const ctx = new AudioContext();\n      let audio;\n      fetch(what)\n        .then((data) => data.arrayBuffer())\n        .then((arrayBuffer) => ctx.decodeAudioData(arrayBuffer))\n        .then((decodedAudio) => {\n          audio = decodedAudio;\n          const playSound = ctx.createBufferSource();\n          playSound.buffer = audio;\n          playSound.connect(ctx.destination);\n          playSound.start(ctx.currentTime);\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}